plugins {
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 11
targetCompatibility = 11
sourceSets.main.java.srcDirs = ['src']
sourceSets.main.java.outputDir = file('bin')
sourceSets.test.java.srcDirs = ['test/src']
// buildDir = 'build'

wrapper {
  gradleVersion = '6.6'
}

task delombok(type: Exec, dependsOn: compileJava) {
  commandLine "powershell", "-Command", "java", "-jar", "\"lib\\lombok-1.18.16.jar\"", "delombok", "src", "--classpath", "\"build\\libs\\jisd-all.jar\"", "-d", "build/delombok/src"
}

javadoc {
  dependsOn delombok
  source = "build/delombok/src"
  exclude('demo/**')
  exclude('util/**')
  destinationDir = file("../JISD-doc/docs")
  failOnError = true
  options.setMemberLevel(JavadocMemberLevel.PUBLIC)
  doLast {
    copy {
      from "../JISD-doc/.nojekyll"
      into "../JISD-doc/docs"
    }
  }
}

jar {
  archiveBaseName = 'jisd'
  archiveVersion = '0.0.1'
  exclude('demo/**')
}

shadowJar {
  dependsOn jar
  exclude('demo/**')
}

test {
  useJUnitPlatform()
}

repositories {
  mavenCentral()
}

dependencies {
  // https://mvnrepository.com/artifact/org.ow2.asm/asm
  implementation 'org.ow2.asm:asm:9.0'

  // https://mvnrepository.com/artifact/org.ow2.asm/asm-tree
  implementation 'org.ow2.asm:asm-tree:9.0'

  // https://mvnrepository.com/artifact/org.json/json
  implementation 'org.json:json:20171018'

  // jdiscript
  implementation files('../jdiscript/jdiscript/build/libs/jdiscript-0.9.0.jar')

  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

  // https://mvnrepository.com/artifact/org.projectlombok/lombok
  compileOnly 'org.projectlombok:lombok:1.18.16'
  annotationProcessor 'org.projectlombok:lombok:1.18.16'

}

task createKernelJson(type: JavaExec) {
  main = "util.JISDPreProcess"
  classpath = sourceSets.main.runtimeClasspath
  def path = project.hasProperty("jsonpath") ? project.property("jsonpath") : ""
  def cp = project.hasProperty("cp") ? project.property("cp") : ""
  args(path, path, cp)
}
